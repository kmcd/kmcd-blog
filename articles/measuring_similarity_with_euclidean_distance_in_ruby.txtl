---
title:  Measuring similarity with Euclidean distance in Ruby
tag:   Algorithms
date:  Nov 2 2009
---

We can use  Euclidean distance to measure the similarity between reviewer and rated films, given a list of reviewer, films and a reviewer rating for each film. 

h2. Measuring similarity

To find the similarity between two films you must:
# Express each films rating as a point in multidimensional space
# Calculate the Euclidean distance between those two points

h2. Data set

Here's a table with reviewers reviewer and films:

<pre>
Reviewer   Film            Rating (1-5)
---------------------------------------
Ringo      Pulp Fiction    5 
Ringo      Blade Runner    2 
Ringo      Casablanca      3 
Paul       Pulp Fiction    4 
Paul       Blade Runner    5 
Paul       Casablanca      3 
John       Metropolis      3 
John       Casablanca      3 
George     Pulp Fiction    2 
George     Casablanca      5 
</pre>

h2. Comparing films

To compare two films, use each *reviewer rating as a point in multidimensional space*; e.g. Pulp Fiction P(5,4,2) and Casablanca Q(3,3,5) :

| &radic; (P ~1~ - Q ~1~ ) ^2^ + (P ~2~ - Q ~2~ ) ^2^ + (P ~3~ - Q ~3~ ) ^2^ |
| = &radic; (5-3) ^2^ + (4-3) ^2^ + (2-5) ^2^ |
| = &radic; (2) ^2^ + (1) ^2^ + (-3) ^2^ |
| = &radic; 4 + 1 + 9  &asymp; 3.742 |

h2. Comparing reviewers

To compare two reviewers, *only use the films they have both rated*. In the case of Ringo and Geogre that's Pulp Fiction & Casablanca, giving Ringo P(5,3) and George Q(2,5) :

| &radic; (P ~1~ - Q ~1~ ) ^2^ + (P ~2~ - Q ~2~ ) ^2^ |
| = &radic; (5-2) ^2^ + (3-5) ^2^ |
| = &radic; (3) ^2^ + (-2) ^2^ |
| = &radic; 9 + 4 &asymp; 3.605 |

Therefore, the closer together two films, the more similar they are. Conversely, the further apart, the less similar they are. i.e. Reviewers with a similarity of 0.1 would have similar tastes, whereas reviewers with 10.50 would be dissimilar.

h2. References
* "Wikipedia:Euclidean distance":http://en.wikipedia.org/wiki/Euclidean_distance
* "Programming Collective Intelligence":http://www.amazon.com/Programming-Collective-Intelligence-Building-Applications/dp/0596529325/ref=sr_1_2?ie=UTF8&s=books&qid=1240322333&sr=8-2 by Toby Segaran

h2. Futher reading

You can also use Euclidean distance to:
* "calculate the similarity between two documents":http://www.phpandme.net/2009/03/calculating-distance-between-two-documents
* or calculate the proximity of two locations

I'm working through the examples in the Collective Intelligence book by Segaran. You can find them at my "Collective Intelligence github repository":http://github.com/kmcd/ci
